---
title: "Yellow Taxi Trip Data"
subtitle: "NYC | Taxi & Limousine Commision"
date: "2025-06-03"
author: "Jaka Ahlin"
format: 
    html:
      toc: true
      toc-location: left
      toc-depth: 4
      toc-float: true
      embed-resources: true
editor: visual
execute:
    warning: false
    message: false
    error: true
---

# Introduction

```{r}

```

# Load packages

```{r}
library("arrow")
library("gt")
library("janitor")
library("psych")
library("skimr")
library("dplyr")
library("tidyverse")
library("ggplot2")
```

# Read data

```{r}
df <- read_parquet("../archive/yellow_tripdata_2025-01.parquet")
```

# Clean names

```{r}
df <- clean_names(df)
```

# View data

```{r}
df %>% 
  head() %>% 
  gt()
```

```{r}
skim(df)
```

# Column descriptions

| Field Name | Description |
|------------------------------------|------------------------------------|
| VendorID | A code indicating the TPEP provider that provided the record.<br>1 = Creative Mobile Technologies, LLC<br>2 = Curb Mobility, LLC<br>6 = Myle Technologies Inc<br>7 = Helix |
| tpep_pickup_datetime | The date and time when the meter was engaged. |
| tpep_dropoff_datetime | The date and time when the meter was disengaged. |
| passenger_count | The number of passengers in the vehicle. |
| trip_distance | The elapsed trip distance in miles reported by the taximeter. |
| RatecodeID | The final rate code in effect at the end of the trip.<br>1 = Standard rate<br>2 = JFK<br>3 = Newark<br>4 = Nassau or Westchester<br>5 = Negotiated fare<br>6 = Group ride<br>99 = Null/unknown |
| store_and_fwd_flag | This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server.<br>Y = store and forward trip<br>N = not a store and forward trip |
| PULocationID | TLC Taxi Zone in which the taximeter was engaged. |
| DOLocationID | TLC Taxi Zone in which the taximeter was disengaged. |
| payment_type | A numeric code signifying how the passenger paid for the trip.<br>0 = Flex Fare trip<br>1 = Credit card<br>2 = Cash<br>3 = No charge<br>4 = Dispute<br>5 = Unknown<br>6 = Voided trip |
| fare_amount | The time-and-distance fare calculated by the meter. For additional information on the following columns, see https://www.nyc.gov/site/tlc/passengers/taxi-fare.page |
| extra | Miscellaneous extras and surcharges. |
| mta_tax | Tax that is automatically triggered based on the metered rate in use. |
| tip_amount | Tip amount â€“ This field is automatically populated for credit card tips. Cash tips are not included. |
| tolls_amount | Total amount of all tolls paid in trip. |
| improvement_surcharge | Improvement surcharge assessed trips at the flag drop. The improvement surcharge began being levied in 2015. |
| total_amount | The total amount charged to passengers. Does not include cash tips. |
| congestion_surcharge | Total amount collected in trip for NYS congestion surcharge. |
| airport_fee | For pick up only at LaGuardia and John F. Kennedy Airports. |
| cbd_congestion_fee | Per-trip charge for MTA's Congestion Relief Zone starting Jan. 5, 2025. |

# Adding Vendor Names based on Vendor Id

```{r}
df <- df %>%
  mutate(vendor_name = case_when(
    vendor_id == 1 ~ "Creative Mobile Technologies, LLC",
    vendor_id == 2 ~ "Curb Mobility, LLC",
    vendor_id == 6 ~ "Myle Technologies Inc",
    vendor_id == 7 ~ "Helix"
  ))
df$vendor_name %>% head()
```

# Adding A Payment Type Column

```{r}
df <- df %>%
  mutate(payment_type_name = case_when(
    payment_type == 0 ~ "Flex Fare trip",
    payment_type == 1 ~ "Credit card",
    payment_type == 2 ~ "Cash",
    payment_type == 3 ~ "No charge",
    payment_type == 4 ~ "Dispute",
    payment_type == 5 ~ "Unknown",
    payment_type == 6 ~ "Voided trip"
  ))
df$payment_type_name %>% head()
```

# Date and Time transformation

```{r}
df <- df %>%
  mutate(across(c(tpep_pickup_datetime, tpep_dropoff_datetime), ymd_hms))

df %>%
  select(tpep_pickup_datetime, tpep_dropoff_datetime) %>%
  head()
```

# Adding a day in the week column

```{r}
df <- df %>%
  mutate(
    pickup_day = wday(tpep_pickup_datetime, week_start = 1),
    dropoff_day = wday(tpep_dropoff_datetime, week_start = 1)
  )

df %>% 
  select(pickup_day, dropoff_day) %>%
  head()
```

# How many trips were during the weekend (Saturday and Sunday) and during the weekdays (Monday - Friday) percentage wise?

```{r}
df %>%
  filter(pickup_day %in% 1:5 | dropoff_day %in% 1:5) %>%
  summarise(Mon_Fri=n() / nrow(df) * 100, Sat_Sun = 100 - Mon_Fri)
```

# Do drivers get more tips during the weekday or weekend?

```{r}
df %>%
  mutate(day_type = ifelse(pickup_day %in% 1:5 & dropoff_day %in% 1:5, "Weekday", "Weekend")) %>%
  group_by(day_type) %>%
  summarise(avg_tip = mean(tip_amount))
```

# Do the tips differ between the vendors?

```{r}
df %>%
  group_by(vendor_name) %>%
  summarise(avg_tip = mean(tip_amount), num_trips = n()) %>%
  arrange(desc(avg_tip))
```

# Do the tips differ based on the number of passengers?

```{r}
df %>%
  filter(!is.na(passenger_count)) %>%
  group_by(passenger_count) %>%
  summarise(avg_tip = mean(tip_amount), num_trips = n()) %>%
  arrange(desc(avg_tip))
```

# Does the payment type affect the tip amount?

```{r}
df %>%
  group_by(payment_type_name) %>%
  summarise(avg_tip = mean(tip_amount), num_trips = n()) %>%
  arrange(desc(avg_tip))
```

# Does the trip distance affect the tip amount?
```{r}
df %>%
  mutate(trip_distance = ceiling(trip_distance)) %>%
  group_by(trip_distance) %>%
  summarise(avg_tip = mean(tip_amount), num_trips = n()) %>%
  filter(num_trips > 1) %>%
  arrange(desc(avg_tip)) %>%
  ggplot(aes(x = factor(trip_distance), y = avg_tip)) +
  geom_col(fill = "yellowgreen") +
  labs(title = "Average Tip Amount by Trip Distance",
       x = "Trip Distance (miles)",
       y = "Average Tip Amount") +
  scale_x_discrete(breaks = seq(0, max(df$trip_distance), by = 5))
```







